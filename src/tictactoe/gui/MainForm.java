/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainForm.java
 *
 * Created on 4.10.2011, 17:06:34
 */
package tictactoe.gui;


import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Point;
import javax.swing.JLabel;
import tictactoe.Board;
import tictactoe.Cell;
import tictactoe.Player;
import tictactoe.StupidPlayer;
import tictactoe.chl159;

/**
 *
 * @author beh01
 */
public class MainForm extends javax.swing.JFrame {

    private final int rows = 20, columns = 20;
    private Board board;
    private JLabel[][] map;
    private Player player;

    /** Creates new form MainForm */
    public MainForm() {
        initComponents();
        GridLayout layout = new GridLayout(rows, columns);
        mainPanel.setLayout(layout);
        map = new JLabel[rows][columns];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                map[i][j] = new JLabel();
                map[i][j].setBackground(Color.white);
                map[i][j].setOpaque(true);
                map[i][j].setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.blue));
                map[i][j].addMouseListener(new java.awt.event.MouseAdapter() {

                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        testLabelMouseClicked(evt);
                    }
                });
                mainPanel.add(map[i][j]);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        newGameButton = new javax.swing.JButton();
        testLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        mainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mainPanel.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );

        newGameButton.setText("New Game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });

        testLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/gui/circle.png"))); // NOI18N
        testLabel.setText("jLabel1");
        testLabel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.blue));
        testLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(testLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                    .addComponent(newGameButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(newGameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(testLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateView() {
        if (board != null) {
            for (int i = 0; i < board.getNumberOfRows(); i++) {
                for (int j = 0; j < board.getNumberOfColumns(); j++) {
                    if (board.getCell(i, j) == null) {
                        map[i][j].setBackground(Color.black);
                        map[i][j].setIcon(null);
                    } else {
                        map[i][j].setBackground(Color.white);
                        if (board.getCell(i, j) == Cell.CIRCLE) {
                            map[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/gui/circle.png")));
                        } else {
                            map[i][j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/gui/cross.png")));
                        }
                    }
                }
            }
        }
    }
    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        board = new Board(rows, columns);
        player=new chl159();
        updateView();
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    }//GEN-LAST:event_formKeyPressed

    private void testLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testLabelMouseClicked
        if (board != null) {
            for (int i = 0; i < board.getNumberOfRows(); i++) {
                for (int j = 0; j < board.getNumberOfColumns(); j++) {
                    if (evt.getSource() == map[i][j]) {
                        testLabel.setText("" + i + "," + j);
                        board.setCell(Cell.CROSS, i, j);
                        updateView();
                        if (checkWinner()) {
                            testLabel.setText("Winner is cross");
                            board = null;
                            return;
                        } else {
                            Point p = player.makeMove(board, Cell.CIRCLE);
                            board.setCell(Cell.CIRCLE, p.x, p.y);
                            updateView();
                            if (checkWinner()) {
                                testLabel.setText("Winner is circle");
                                board = null;
                                return;
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_testLabelMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton newGameButton;
    private javax.swing.JLabel testLabel;
    // End of variables declaration//GEN-END:variables

    private boolean checkWinner() {
        if (board != null) {
            for (int i = 0; i < board.getNumberOfRows(); i++) {
                for (int j = 0; j < board.getNumberOfColumns(); j++) {
                    if (board.getCell(i, j) != null) {
                        if (checkField(i, j, board.getCell(i, j))) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private boolean checkField(int i, int j, Cell cell) {
        int[][] positions = {{0,1},{1,0},{1,1},{1,-1}};
        for(int k=0;k<positions.length;k++) {
            boolean allTrue=true;
            for(int l=1;l<5;l++) {
                if (checkCell(i+positions[k][0]*l,
                        j+positions[k][1]*l,
                cell)==false) {
                    allTrue=false;
                    break;
                }
            }
            if (allTrue) return true;
        }
        return false;
    }
    private boolean checkCell(int i, int j, Cell cell) {
        if (i<0 || i>=board.getNumberOfRows()) return false;
        if (j<0 || j>=board.getNumberOfColumns()) return false;
        return board.getCell(i, j)==cell;
    }

    
}
